name: deploy my app new oic
on: [push]
env:
  IMAGE: OicBackend
  VERSION: 0.0.1
jobs:
  create-folder:
    name: create-folder
    runs-on: ubuntu-latest
    steps:
      - name: executing remote SSH command on my new test 1
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo mkdir /opt/applications/oic/${{env.IMAGE}}
            sudo chmod 777 /opt/applications/oic/${{env.IMAGE}}
            ls -al /opt/applications/oic
  generate-image:
    name: generate-image
    runs-on: ubuntu-latest
    needs: ['create-folder']
    steps:
      - name: cloner mon rÃ©pertoire des sources
        uses: actions/checkout@master
      - name: Setup Java Version
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: Generate automatic Image
        run: |
          mvn clean package spring-boot:build-image \
          -Ddocker.publishRegistry.username=${{ secrets.DCK_HUB_USERNAME }} \
          -Ddocker.publishRegistry.password=${{ secrets.DCK_HUB_PASSWORD }} \
          -Dspring-boot.build-image.publish=true \
          -Dmaven.test.skip=true
  run-container:
    name: run container
    runs-on: ubuntu-latest
    needs: [ 'create-folder', 'generate-image' ]
    steps:
      - name: cloner repertoire
        uses: actions/checkout@master
      - name: copy file via ssh
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "compose.yml"
          target: /opt/applications/oic/${{env.IMAGE}}
      - name: executing command by docker and run container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo APP_SERVER_PORT="${{ secrets.APP_SERVER_PORT }}" >> /opt/applications/oic/${{env.IMAGE}}/.env
            docker compose -f /opt/applications/oic/${{env.IMAGE}}/compose.yml up -d